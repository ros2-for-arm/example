//
// Copyright (c) 2018, ARM Limited.
//
// SPDX-License-Identifier: Apache-2.0
//

#ifndef TA_SECURITY_API__TA_RSA_KEYS_H_
#define TA_SECURITY_API__TA_RSA_KEYS_H_

#include "ta_security_api/ta_rsa.h"

#define TA_RSA_KEYS_NUMBER_ATTRIBUTE 8

static uint8_t TA_RSA_KEYS_1024_KEY1_MODULUS[TA_RSA1024_KEY_SIZE_BYTE] = {
  0xab, 0x42, 0x30, 0x54, 0x02, 0x15, 0x19, 0x4f, 0x03, 0x15, 0x73, 0xdf,
  0x96, 0x4c, 0x23, 0xeb, 0xd3, 0xd5, 0xf2, 0xff, 0x17, 0xf4, 0x1f, 0x5c,
  0x41, 0x26, 0x3e, 0x20, 0x15, 0x6d, 0x0a, 0x70, 0x8d, 0x9e, 0x9e, 0x67,
  0x47, 0x87, 0x6a, 0x15, 0xb5, 0x40, 0x38, 0x99, 0x64, 0x90, 0xc1, 0x32,
  0x32, 0x95, 0xc7, 0x63, 0x0a, 0xac, 0x5b, 0xcc, 0x21, 0x6b, 0x51, 0x7b,
  0xa5, 0xef, 0x7b, 0x62, 0x12, 0x34, 0x2d, 0x8d, 0xb6, 0x0d, 0x24, 0x92,
  0xa4, 0x83, 0xd4, 0x3b, 0xa5, 0x29, 0xe2, 0x94, 0xfc, 0xcd, 0x5e, 0xcb,
  0xc6, 0x52, 0x7b, 0xf7, 0x65, 0x80, 0x1f, 0x63, 0xcb, 0x4f, 0x40, 0x27,
  0x5b, 0x2d, 0x2a, 0x9f, 0xce, 0x9b, 0x33, 0x97, 0xeb, 0xbe, 0xcb, 0x34,
  0x22, 0xff, 0x5f, 0x21, 0x21, 0xba, 0x75, 0xb3, 0xba, 0x8f, 0x00, 0x9e,
  0x08, 0x66, 0x86, 0x4a, 0x8e, 0x40, 0xb2, 0x5f
};

static
uint8_t TA_RSA_KEYS_1024_KEY1_PRIVATE_EXPONENT[TA_RSA1024_KEY_SIZE_BYTE] = {
  0x91, 0xaa, 0x4f, 0xae, 0xf4, 0xc2, 0x7b, 0x6f, 0x60, 0x21, 0x1c, 0x18,
  0xde, 0x1e, 0xcf, 0x22, 0xe4, 0x60, 0x83, 0x3a, 0x04, 0x66, 0xc9, 0x51,
  0xcf, 0xbc, 0x36, 0x75, 0x55, 0xa4, 0x14, 0x90, 0x1d, 0x75, 0x00, 0x28,
  0xba, 0x87, 0x6c, 0x6d, 0x20, 0x68, 0x8a, 0x7b, 0xb6, 0x35, 0x05, 0x8e,
  0xab, 0xc6, 0x07, 0xfc, 0xae, 0xf4, 0x61, 0x74, 0x24, 0x2c, 0xc2, 0xf6,
  0xd7, 0xf1, 0xf5, 0x4f, 0xd3, 0x68, 0x86, 0x9b, 0x40, 0x47, 0x74, 0x51,
  0x2a, 0xe3, 0x87, 0xe3, 0x6f, 0x8c, 0x2e, 0x71, 0xb9, 0xe1, 0x49, 0x62,
  0x8b, 0x1f, 0x00, 0x92, 0x51, 0x82, 0x5b, 0x56, 0xeb, 0x55, 0x4e, 0x17,
  0x67, 0x91, 0x74, 0xc3, 0x01, 0xdc, 0x34, 0xda, 0x56, 0x03, 0x3c, 0x5d,
  0x50, 0xb5, 0xa5, 0xf5, 0xd0, 0xe1, 0x84, 0x7f, 0x2c, 0x16, 0x86, 0x34,
  0x1d, 0xb1, 0x8f, 0xd9, 0xb4, 0x0b, 0x35, 0x79
};

static uint8_t TA_RSA_KEYS_1024_KEY1_PRIME1[TA_RSA1024_VECTOR_SIZE] = {
  0xec, 0xbb, 0x19, 0x15, 0xc6, 0x52, 0xee, 0xf2, 0x75, 0x0b, 0x2f, 0x4f,
  0x1b, 0x2e, 0xd5, 0x14, 0x13, 0x26, 0xb4, 0xb4, 0x8d, 0x1d, 0xbd, 0x27,
  0xbb, 0x38, 0xba, 0x2f, 0xa7, 0xc7, 0xb6, 0x76, 0x88, 0xad, 0x73, 0x24,
  0x56, 0xe4, 0xd6, 0x9e, 0xe1, 0x20, 0x50, 0x4e, 0x90, 0x09, 0xb1, 0xf7,
  0x58, 0x1f, 0x47, 0x82, 0x88, 0xe7, 0xd8, 0xab, 0x3c, 0x1c, 0x9d, 0xc1,
  0xa7, 0x79, 0x5c, 0x65
};

static uint8_t TA_RSA_KEYS_1024_KEY1_PRIME2[TA_RSA1024_VECTOR_SIZE] = {
  0xb9, 0x32, 0xce, 0x2d, 0x38, 0xb4, 0x21, 0x7f, 0x9e, 0x79, 0x36, 0xf8,
  0x6a, 0xf4, 0x99, 0xae, 0x57, 0x1b, 0xd6, 0x1c, 0x53, 0xf7, 0xf9, 0x61,
  0xed, 0x47, 0xca, 0x7d, 0x76, 0xd7, 0x4e, 0xc6, 0x59, 0x51, 0x2d, 0xea,
  0x91, 0x0f, 0xdf, 0x56, 0x77, 0xa9, 0x2e, 0xf7, 0x63, 0x57, 0x14, 0x93,
  0x3b, 0x6f, 0x39, 0x4d, 0x88, 0x18, 0x2f, 0x78, 0xfc, 0xa3, 0xdb, 0xf6,
  0xc0, 0x05, 0xdd, 0x73
};

static uint8_t TA_RSA_KEYS_1024_KEY1_EXPONENT1[TA_RSA1024_VECTOR_SIZE] = {
  0xaa, 0xa7, 0x45, 0xb2, 0x18, 0xc1, 0xf8, 0x56, 0xf8, 0x61, 0x13, 0xbd,
  0xa7, 0x0e, 0xdf, 0xb4, 0x15, 0x0a, 0x36, 0x02, 0x62, 0x28, 0x2a, 0x0f,
  0xd6, 0x3b, 0x52, 0x9c, 0xc0, 0x0a, 0x8c, 0x52, 0x6e, 0xbc, 0xfa, 0xe0,
  0x1b, 0x73, 0xe3, 0xf3, 0xac, 0xbe, 0xaa, 0xa5, 0xb7, 0xd8, 0x05, 0x5f,
  0x15, 0x3b, 0x97, 0x45, 0x56, 0x84, 0x2c, 0x01, 0x64, 0xd8, 0x0c, 0x31,
  0x6a, 0x15, 0x66, 0xb1
};

static uint8_t TA_RSA_KEYS_1024_KEY1_EXPONENT2[TA_RSA1024_VECTOR_SIZE] = {
  0x82, 0xec, 0x11, 0xa9, 0x12, 0x5e, 0xf5, 0x17, 0x7c, 0xf6, 0x80, 0x0f,
  0xd9, 0xbc, 0x95, 0x30, 0x14, 0x50, 0x8f, 0x6a, 0x73, 0x49, 0xe8, 0x38,
  0x7c, 0x3f, 0xb6, 0x3c, 0x3f, 0xd9, 0x31, 0xcd, 0x32, 0xb3, 0x1a, 0xdc,
  0xaa, 0x34, 0x28, 0x54, 0xbe, 0x3f, 0x11, 0xfe, 0xbd, 0x71, 0x80, 0x10,
  0x1d, 0x82, 0x21, 0x66, 0x58, 0x01, 0x90, 0xfd, 0xdc, 0xcc, 0x11, 0xe2,
  0x3c, 0x19, 0x69, 0x55
};

static uint8_t TA_RSA_KEYS_1024_KEY1_COEFFICIENT[TA_RSA1024_VECTOR_SIZE] = {
  0x2b, 0x9b, 0x48, 0xc0, 0xe1, 0xcb, 0x28, 0x9c, 0x03, 0xb2, 0xcf, 0xc6,
  0xf6, 0xbb, 0xbe, 0x1b, 0xad, 0xe6, 0x3b, 0xd3, 0x65, 0xbb, 0xca, 0xb7,
  0x43, 0x17, 0x8e, 0x3d, 0xb1, 0x6d, 0xc3, 0x06, 0xad, 0x7d, 0xe8, 0x81,
  0xb9, 0x5a, 0x13, 0xad, 0x18, 0x46, 0xcd, 0x93, 0xb6, 0x44, 0x1f, 0xd0,
  0x4d, 0x73, 0xb1, 0x00, 0x4d, 0x46, 0xc8, 0x22, 0x4a, 0x7e, 0xb8, 0xe6,
  0xdd, 0xae, 0x5f, 0x40
};
static uint8_t TA_RSA_KEYS_1024_KEY1_PUBLIC_EXPONENT[3] = {
  0x01, 0x00, 0x01
};


#define INITIALIZE_ATTRIBUTE_PARAMETERS_RSA(attribute, keyName) \
  attribute[0].attributeID = TEE_ATTR_RSA_MODULUS; \
  attribute[0].content.ref.buffer = keyName ## _MODULUS; \
  attribute[0].content.ref.length = sizeof(keyName ## _MODULUS); \
 \
  attribute[1].attributeID = TEE_ATTR_RSA ## _PUBLIC_EXPONENT; \
  attribute[1].content.ref.buffer = keyName ## _PUBLIC_EXPONENT; \
  attribute[1].content.ref.length = sizeof(keyName ## _PUBLIC_EXPONENT); \
 \
  attribute[2].attributeID = TEE_ATTR_RSA_PRIVATE_EXPONENT; \
  attribute[2].content.ref.buffer = keyName ## _PRIVATE_EXPONENT; \
  attribute[2].content.ref.length = sizeof(keyName ## _PRIVATE_EXPONENT); \
 \
  attribute[3].attributeID = TEE_ATTR_RSA_PRIME1; \
  attribute[3].content.ref.buffer = keyName ## _PRIME1; \
  attribute[3].content.ref.length = sizeof(keyName ## _PRIME1); \
 \
  attribute[4].attributeID = TEE_ATTR_RSA_PRIME2; \
  attribute[4].content.ref.buffer = keyName ## _PRIME2; \
  attribute[4].content.ref.length = sizeof(keyName ## _PRIME2); \
 \
  attribute[5].attributeID = TEE_ATTR_RSA_EXPONENT1; \
  attribute[5].content.ref.buffer = keyName ## _EXPONENT1; \
  attribute[5].content.ref.length = sizeof(keyName ## _EXPONENT1); \
 \
  attribute[6].attributeID = TEE_ATTR_RSA_EXPONENT2; \
  attribute[6].content.ref.buffer = keyName ## _EXPONENT2; \
  attribute[6].content.ref.length = sizeof(keyName ## _EXPONENT2); \
 \
  attribute[7].attributeID = TEE_ATTR_RSA_COEFFICIENT; \
  attribute[7].content.ref.buffer = keyName ## _COEFFICIENT; \
  attribute[7].content.ref.length = sizeof(keyName ## _COEFFICIENT);

#endif  // TA_SECURITY_API__TA_RSA_KEYS_H_
